apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: romm-12.2.0
    app.kubernetes.io/instance: romm
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: romm
    app.kubernetes.io/version: 3.10.0
    helm-revision: "1"
    helm.sh/chart: romm-12.2.0
    release: romm
  name: romm
  namespace: romm
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/instance: romm
      app.kubernetes.io/name: romm
      pod.name: main
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/cnpg: 2291fc448ae81adfd860632d73e38ffc039fc25959ede77cf692f754199383ee
        checksum/configmaps: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/mariadb: 56f7b611ec9b4bee54d81c0cccee56dfd474397933a3040e8d85dcec6331564c
        checksum/mongodb: 09c85576cb45b1eecd1467732b11ea8fa3363b0105c465f02a6ad64991521d52
        checksum/persistence: 93f297b2dc801369910048359b61f369b9fa6ef724d690f7364d70cf9aeb0073
        checksum/redis: c6e342425626fae052fbec4ba628c4fc30512aa3589265a3627e9ae8b21d17c9
        checksum/secrets: 6ad340d04a63695127ce96198cded53015c99f661f0fe594afc62c98c04a6678
        checksum/services: 4b546be00d25ad56b44b4d24cbff97d9830c9d79b2a43912df4e5912c109bf16
        checksum/solr: 29c14feeaddbf7762052db593898d274941f539cee681ddc613957587686f347
      labels:
        app: romm-12.2.0
        app.kubernetes.io/instance: romm
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: romm
        app.kubernetes.io/version: 3.10.0
        helm-revision: "1"
        helm.sh/chart: romm-12.2.0
        pod.lifecycle: permanent
        pod.name: main
        release: romm
        truecharts.org/pvc: assets_config_resources
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: truecharts.org/pvc
                    operator: In
                    values:
                      - assets_config_resources
              topologyKey: kubernetes.io/hostname
      automountServiceAccountToken: false
      containers:
        - env:
            - name: TZ
              value: UTC
            - name: UMASK
              value: "0022"
            - name: UMASK_SET
              value: "0022"
            - name: NVIDIA_VISIBLE_DEVICES
              value: void
            - name: S6_READ_ONLY_ROOT
              value: "1"
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  key: plainhost
                  name: romm-mariadbcreds
            - name: DB_NAME
              value: romm
            - name: DB_PASSWD
              value: PLACEHOLDERPASSWORD
            - name: DB_PORT
              value: "3306"
            - name: DB_USER
              value: romm
            - name: DISABLE_CSRF_PROTECTION
              value: "true"
            - name: IGDB_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  key: IGDB_CLIENT_ID
                  name: romm-secrets
            - name: IGDB_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  key: IGDB_CLIENT_SECRET
                  name: romm-secrets
            - name: OIDC_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  key: OIDC_CLIENT_ID
                  name: romm-secrets
            - name: OIDC_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  key: OIDC_CLIENT_SECRET
                  name: romm-secrets
            - name: OIDC_ENABLED
              value: "true"
            - name: OIDC_PROVIDER
              valueFrom:
                secretKeyRef:
                  key: OIDC_PROVIDER
                  name: romm-secrets
            - name: OIDC_REDIRECT_URI
              valueFrom:
                secretKeyRef:
                  key: OIDC_REDIRECT_URI
                  name: romm-secrets
            - name: OIDC_SERVER_APPLICATION_URL
              valueFrom:
                secretKeyRef:
                  key: OIDC_SERVER_APPLICATION_URL
                  name: romm-secrets
            - name: REDIS_HOST
              valueFrom:
                secretKeyRef:
                  key: plainhost
                  name: romm-rediscreds
            - name: REDIS_PASSWORD
              value: PLACEHOLDERPASSWORD
            - name: REDIS_PORT
              value: "6379"
            - name: ROMM_AUTH_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: ROMM_AUTH_SECRET_KEY
                  name: romm-secrets
            - name: ROMM_BASE_PATH
              value: /romm
            - name: ROMM_HOST
              value: localhost
          image: ghcr.io/rommapp/romm:4.0.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 12
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 5
          name: romm
          ports:
            - containerPort: 8080
              name: main
              protocol: TCP
          readinessProbe:
            failureThreshold: 4
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 12
            successThreshold: 2
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 1000m
              memory: 1500Mi
            requests:
              cpu: 100m
              memory: 250Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add: []
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 1002
            runAsNonRoot: true
            runAsUser: 1002
            seccompProfile:
              type: RuntimeDefault
          startupProbe:
            failureThreshold: 60
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          stdin: false
          tty: false
          volumeMounts:
            - mountPath: /romm/assets
              name: assets
              readOnly: false
            - mountPath: /romm/config
              name: config
              readOnly: false
            - mountPath: /dev/shm
              name: devshm
              readOnly: false
            - mountPath: /romm/library
              name: library
              readOnly: false
            - mountPath: /romm/resources
              name: resources
              readOnly: false
            - mountPath: /shared
              name: shared
              readOnly: false
            - mountPath: /tmp
              name: tmp
              readOnly: false
            - mountPath: /var/logs
              name: varlogs
              readOnly: false
            - mountPath: /var/run
              name: varrun
              readOnly: false
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      hostIPC: false
      hostNetwork: false
      hostPID: false
      hostUsers: true
      initContainers:
        - command:
            - /bin/sh
            - -c
            - |-
              /bin/bash <<'EOF'
              echo "Executing DB waits..."
              until
                mysqladmin -uroot -h"${MARIADB_HOST}" -p"${MARIADB_ROOT_PASSWORD}" ping \
                && mysqladmin -uroot -h"${MARIADB_HOST}" -p"${MARIADB_ROOT_PASSWORD}" status;
                do sleep 2;
              done
              EOF
          env:
            - name: TZ
              value: UTC
            - name: UMASK
              value: "0022"
            - name: UMASK_SET
              value: "0022"
            - name: NVIDIA_VISIBLE_DEVICES
              value: void
            - name: S6_READ_ONLY_ROOT
              value: "1"
            - name: MARIADB_HOST
              valueFrom:
                secretKeyRef:
                  key: plainhost
                  name: romm-mariadbcreds
            - name: MARIADB_ROOT_PASSWORD
              value: PLACEHOLDERROOTPASSWORD
          image: tccr.io/tccr/db-wait-mariadb:v1.1.0@sha256:e2f91d35efd33d1fe179f452405bb9e673fb56c00ed08de079ee048120776c30
          imagePullPolicy: IfNotPresent
          name: romm-system-mariadb-wait
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 50Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add: []
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 568
            runAsNonRoot: true
            runAsUser: 568
            seccompProfile:
              type: RuntimeDefault
          stdin: false
          tty: false
          volumeMounts:
            - mountPath: /dev/shm
              name: devshm
              readOnly: false
            - mountPath: /shared
              name: shared
              readOnly: false
            - mountPath: /tmp
              name: tmp
              readOnly: false
            - mountPath: /var/logs
              name: varlogs
              readOnly: false
            - mountPath: /var/run
              name: varrun
              readOnly: false
        - command:
            - /bin/sh
            - -c
            - |-
              /bin/bash <<'EOF'
              echo "Executing DB waits..."
              [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD";
              export LIVE=false;
              until "$LIVE";
              do
                response=$(
                    timeout -s 3 2 \
                    redis-cli \
                      -h "$REDIS_HOST" \
                      -p "$REDIS_PORT" \
                      ping
                  )
                if [ "$response" == "PONG" ] || [ "$response" == "LOADING Redis is loading the dataset in memory" ]; then
                  LIVE=true
                  echo "$response"
                  echo "Redis Responded, ending initcontainer and starting main container(s)..."
                else
                  echo "$response"
                  echo "Redis not responding... Sleeping for 10 sec..."
                  sleep 10
                fi;
              done
              EOF
          env:
            - name: TZ
              value: UTC
            - name: UMASK
              value: "0022"
            - name: UMASK_SET
              value: "0022"
            - name: NVIDIA_VISIBLE_DEVICES
              value: void
            - name: S6_READ_ONLY_ROOT
              value: "1"
            - name: REDIS_HOST
              valueFrom:
                secretKeyRef:
                  key: plainhost
                  name: romm-rediscreds
            - name: REDIS_PASSWORD
              value: PLACEHOLDERPASSWORD
            - name: REDIS_PORT
              value: "6379"
          image: tccr.io/tccr/db-wait-redis:v1.1.0@sha256:13b78f5b48d130a21ee601549c883064588c6a639d778c7a60a6cb44a03c7e77
          imagePullPolicy: IfNotPresent
          name: romm-system-redis-wait
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 50Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add: []
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 568
            runAsNonRoot: true
            runAsUser: 568
            seccompProfile:
              type: RuntimeDefault
          stdin: false
          tty: false
          volumeMounts:
            - mountPath: /dev/shm
              name: devshm
              readOnly: false
            - mountPath: /shared
              name: shared
              readOnly: false
            - mountPath: /tmp
              name: tmp
              readOnly: false
            - mountPath: /var/logs
              name: varlogs
              readOnly: false
            - mountPath: /var/run
              name: varrun
              readOnly: false
      nodeSelector:
        kubernetes.io/arch: amd64
      restartPolicy: Always
      securityContext:
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups:
          - 568
        sysctls: []
      serviceAccountName: default
      shareProcessNamespace: false
      terminationGracePeriodSeconds: 60
      topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/instance: romm
              app.kubernetes.io/name: romm
              pod.name: main
          maxSkew: 1
          nodeAffinityPolicy: Honor
          nodeTaintsPolicy: Honor
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
      volumes:
        - emptyDir:
            medium: Memory
            sizeLimit: 1500Mi
          name: devshm
        - emptyDir: {}
          name: shared
        - emptyDir:
            medium: Memory
            sizeLimit: 1500Mi
          name: tmp
        - emptyDir:
            medium: Memory
            sizeLimit: 1500Mi
          name: varlogs
        - emptyDir:
            medium: Memory
            sizeLimit: 1500Mi
          name: varrun
        - name: library
          nfs:
            path: /r2d2_0/media/Roms
            server: 100.117.238.67
        - name: assets
          persistentVolumeClaim:
            claimName: romm-assets
        - name: config
          persistentVolumeClaim:
            claimName: romm-config
        - name: resources
          persistentVolumeClaim:
            claimName: romm-resources
